/* Readme.txt
						CS 6301.502. IMPLEMENTATION OF ADVANCED DATA STRUCTURES AND ALGORITHMS
						SHORT PROJECT 4
GROUP 38
	RAKESH BALASUBRAMANI - rxb162130
	HARIPRIYAA MANIAN – hum160030
	RAJKUMAR PANNEER SELVAM - rxp162130
	AVINASH VENKATESH – axv165330

*/
Problem 2:  Computing Fibonacci of a number 

Files:
	 Fibonacci.java

Input:
	Number for which the fibonacci is to be calculated

Output:
	Fibonacci of the number calculated using linear and log running time algorithm
	

Sample Execution:
	
	Enter the number
	10000
	Linear Fibonacci
	Time: 15 msec.
	Memory: 6 MB / 121 MB.

	Log Fibonacci
	Time: 1 msec.
	Memory: 7 MB / 121 MB.

-------------------------------------------------------------------------------------------------------------------------------------
	
Problem 3:  Comparison of different versions of Merge Sort

Files:
	 MergeSort.java

Input:
	Input array size

Output:
	Running time for different version

Sample Execution:
	
	Enter the array size in millions 
	1
	Array to be sorted 
	Merge Sort
	1. As described in TextBooks:
	Time: 212 msec.
	Memory: 19 MB / 153 MB.

	2. Passing temp array as a parameter to merge:
	Time: 125 msec.
	Memory: 32 MB / 216 MB.

	3. Using Insertion Sort for array size smaller than threshold 
	Time: 78609 msec.
	Memory: 36 MB / 216 MB.

	4. Avoid copying to tmp array 
	Time: 23639 msec.
	Memory: 40 MB / 216 MB.

----------------------------------------------------------------------------------------------------------------------------------
	
Problem 4:  Version of Binary Search Program to return the index of the largest element that
   is less than or equal to x

Files:
	 BinarySearch.java

Input:
	Input array size, number x 

Output:
	The index of the largest element that is less than or equal to x
	

Sample Execution:
Enter the array size... 
20
Array to be searched 
5
12
22
35
36
38
54
62
69
76
86
86
114
133
135
152
166
178
188
198
Enter the number to be searched... 
37
Index of greater element less than or equal to x: 4

---------------------------------------------------------------------------------------------------------------------------------

Problem 5:  Rearrange negative and positiove numbers 

Files:
	

Input:
	

Output:
	
	

Sample Execution:


